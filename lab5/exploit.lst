     1                                              bits 64
     2                                              ; find out where we are
     3                                  start:      ; your code starts here
     4                                  
     5                                              ;set up stack by pushing zero
     6 00000000 4831C0                              xor rax, rax
     7 00000003 50                                  push rax
     8                                              ;push /bin/sh onto stack    
     9 00000004 48BF2F62696E2F656E-                 mov rdi, '/bin/env'
     9 0000000D 76                 
    10 0000000E 57                                  push rdi
    11                                  
    12                                              ;put address of /bin/sh onto stack
    13 0000000F 4889E7                              mov rdi, rsp
    14                                  
    15                                              ;create argv array
    16                                              ;push null onto stack
    17 00000012 50                                  push rax
    18                                              ;push rdi onto stack
    19 00000013 57                                  push rdi
    20                                              
    21                                              ;put address of argv onto stack
    22 00000014 4889E6                              mov rsi, rsp
    23                                  
    24                                              ;load envion contens into rdx
    25                                              ;clear rdx register
    26 00000017 4831D2                              xor rdx, rdx 
    27                                              ;load low bits of rdx with 0x7fff           
    28 0000001A 66BAFF7F                            mov dx, 0x7fff
    29                                              ;left shift rdx by 32 bits
    30 0000001E 48C1E220                            shl rdx, 32
    31                                              ;load environ address into low 32 bits of rcx
    32 00000022 B9FFE6FBF7                          mov ecx, 0xf7fbe6ff
    33                                              ;clear low 8 bits of rcx
    34 00000027 30C9                                xor cl, cl
    35                                              ;add rcx to rdx
    36 00000029 4809CA                              or rdx, rcx
    37                                              ;load environ address into rdx
    38 0000002C 488B12                              mov rdx, [rdx]
    39                                  
    40                                              ;set up system call
    41 0000002F B03B                                mov al, 0x3b            
    42 00000031 0F05                                syscall
    43                                  
    44                                              ;exit system call
    45 00000033 4889C7                              mov rdi, rax
    46 00000036 4831C0                              xor rax, rax
    47 00000039 B03C                                mov al, 0x3c
    48 0000003B 0F05                                syscall
    49                                  
    50                                              ;space for data so stack does not overflow the code
    51 0000003D FFFFFFFFFFFFFFFF                    dq 0xffffffffffffffff
    52 00000045 FFFFFFFFFFFFFFFF                    dq 0xffffffffffffffff
    53 0000004D FFFFFFFFFFFFFFFF                    dq 0xffffffffffffffff
    54 00000055 FFFFFFFFFFFFFFFF                    dq 0xffffffffffffffff
    55 0000005D FFFFFFFFFFFFFFFF                    dq 0xffffffffffffffff
    56 00000065 65000000                end:        dd end-start
